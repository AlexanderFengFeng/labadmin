#!/usr/bin/env python

from __future__ import division

from os.path import join

from future.utils import viewitems
import click
from dateutil.relativedelta import relativedelta

from knimin.lib.mail import send_email
from knimin import db, config
from knimin.lib.data_access import SQLHandler

__author__ = "Adam Robbins-Pianka"
__copyright__ = "Copyright 2009-2015, QIIME Web Analysis"
__credits__ = ["Adam Robbins-Pianka"]
__license__ = "GPL"
__version__ = "1.0.0"
__maintainer__ = ["Adam Robbins-Pianka"]
__email__ = "adam.robbinspianka@colorado.edu"
__status__ = "Development"


@click.group()
def cli():
    """All commands in this click group will be available at the top level
    """
    pass


@cli.command()
@click.option('-o', '--output_dir', required=True, type=click.Path(
    exists=True, file_okay=False, writable=True))
@click.option('-f', '--full', type=bool, default=False, is_flag=True)
@click.option('-i', '--input_fp', type=click.Path(
    exists=True, dir_okay=False), default=None)
@click.argument('barcodes', nargs=-1)
def pulldown(output_dir, full=False, input_fp=None, barcodes=None):
    """Does a pulldown on given barcodes, or all available if none given

    Parameters
    ----------
    output_dir : str
        where to write out files
    full : bool, optional
    input_fp : str, optional
        A file with barcodes, one per line. If given, pull down these barcodes
    barcodes : list of str, optional
      If given, pull down these barcodes.
    """
    samples = []
    # load in from files if given
    if input_fp is not None:
        with open(input_fp, 'rU') as f:
            lines = f.readlines()
        # barcodes must be in first column, stripping in case extra spaces
        samples = [l.split('\t')[0].strip() for l in lines
                   if not l.startswith('#')]
    # load in the list if given
    if barcodes is not None:
        samples.extend(barcodes)
    # load in all vailable barcodes if none given
    if not samples:
        sql_handler = SQLHandler(config)
        sql = """SELECT DISTINCT barcode
                 FROM ag.ag_kit_barcodes
                 WHERE survey_id is not NULL AND survey_id != ''
                 AND site_sampled IS NOT NULL AND site_sampled != ''
                 AND site_sampled != 'Please select...'
                 AND sample_date IS NOT NULL"""
        samples = [x[0] for x in sql_handler.execute_fetchall(sql)]

    barcodes = [b for b in samples if not b.upper().startswith('BLANK')]
    blanks = [b for b in samples if b.upper().startswith('BLANK')]

    # Get metadata and create zip file
    metadata, failures = db.pulldown(barcodes, blanks, full=full)

    failed = '\n'.join(['\t'.join(bc) for bc in viewitems(failures)])
    with open(join(output_dir, 'failures.txt'), 'w') as f:
        f.write("The following barcodes were not retrieved "
                "for any survey:\n%s" % failed)

    for survey, meta in viewitems(metadata):
        with open(join(output_dir, 'survey_%s_md.txt' % survey), 'w') as f:
            f.write(meta)


@cli.command('email-unconsented')
def email_unconsented():
    message = """Hello from the American Gut team!

This is a friendly reminder that you have not yet associated your sample 
barcode %s with a consent form. By law, we are not permitted to work with your 
sample until you have associated your sample with a consent form. To associate 
your sample, please login to the participant portal 
(https://microbio.me/americangut for American Gut samples and 
https://microbio.me/britishgut for British Gut samples) and click on 
"Associate/Log Sample" on the bottom of the left hand navigation bar. 
Then choose the appropriate sample source and complete the required details 
(sample type, collection date, and collection time). Please note that if your 
sample has not been associated to a consent form within six months after we 
receive it in our laboratory (by %s), it will be destroyed and you will not 
receive a refund or replacement kit. We thank you for your understanding.

The American Gut Team
"""

    for barcode, scan_date, email in db.get_unconsented():
        msg = message % (barcode, str(scan_date + relativedelta(months=+6)))
        send_email(msg, 'You have Un-associated American Gut samples!',
                   recipient=email)

if __name__ == '__main__':
    cli()
